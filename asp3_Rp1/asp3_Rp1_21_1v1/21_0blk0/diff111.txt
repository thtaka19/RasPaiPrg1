10a11,33
>  *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
>  *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
>  *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
>  *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
>  *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
>  *      スコード中に含まれていること．
>  *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
>  *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
>  *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
>  *      の無保証規定を掲載すること．
>  *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
>  *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
>  *      と．
>  *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
>  *        作権表示，この利用条件および下記の無保証規定を掲載すること．
>  *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
>  *        報告すること．
>  *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
>  *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
>  *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
>  *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
>  *      免責すること．
>  * 
22c45,104
< 
---
>  *
>  *  ASPカーネルの基本的な動作を確認するためのサンプルプログラム．
>  *
>  *  プログラムの概要:
>  *
>  *  ユーザインタフェースを受け持つメインタスク（タスクID: MAIN_TASK，優
>  *  先度: MAIN_PRIORITY）と，3つの並行実行されるタスク（タスクID:
>  *  TASK1〜TASK3，初期優先度: MID_PRIORITY）で構成される．また，起動周
>  *  期が2秒の周期ハンドラ（周期ハンドラID: CYCHDR1）を用いる．
>  *
>  *  並行実行されるタスクは，task_loop回空ループを実行する度に，タスクが
>  *  実行中であることをあらわすメッセージを表示する．空ループを実行する
>  *  のは，空ループなしでメッセージを出力すると，多量のメッセージが出力
>  *  され，プログラムの動作が確認しずらくなるためである．また，低速なシ
>  *  リアルポートを用いてメッセージを出力する場合に，すべてのメッセージ
>  *  が出力できるように，メッセージの量を制限するという理由もある．
>  *
>  *  周期ハンドラは，三つの優先度（HIGH_PRIORITY，MID_PRIORITY，
>  *  LOW_PRIORITY）のレディキューを回転させる．プログラムの起動直後は，
>  *  周期ハンドラは停止状態になっている．
>  *
>  *  メインタスクは，シリアルI/Oポートからの文字入力を行い（文字入力を
>  *  待っている間は，並行実行されるタスクが実行されている），入力された
>  *  文字に対応した処理を実行する．入力された文字と処理の関係は次の通り．
>  *  Control-Cまたは'Q'が入力されると，プログラムを終了する．
>  *
>  *  '1' : 対象タスクをTASK1に切り換える（初期設定）．
>  *  '2' : 対象タスクをTASK2に切り換える．
>  *  '3' : 対象タスクをTASK3に切り換える．
>  *  'a' : 対象タスクをact_tskにより起動する．
>  *  'A' : 対象タスクに対する起動要求をcan_actによりキャンセルする．
>  *  'e' : 対象タスクにext_tskを呼び出させ，終了させる．
>  *  't' : 対象タスクをter_tskにより強制終了する．
>  *  '>' : 対象タスクの優先度をHIGH_PRIORITYにする．
>  *  '=' : 対象タスクの優先度をMID_PRIORITYにする．
>  *  '<' : 対象タスクの優先度をLOW_PRIORITYにする．
>  *  'G' : 対象タスクの優先度をget_priで読み出す．
>  *  's' : 対象タスクにslp_tskを呼び出させ，起床待ちにさせる．
>  *  'S' : 対象タスクにtslp_tsk(10秒)を呼び出させ，起床待ちにさせる．
>  *  'w' : 対象タスクをwup_tskにより起床する．
>  *  'W' : 対象タスクに対する起床要求をcan_wupによりキャンセルする．
>  *  'l' : 対象タスクをrel_waiにより強制的に待ち解除にする．
>  *  'u' : 対象タスクをsus_tskにより強制待ち状態にする．
>  *  'm' : 対象タスクの強制待ち状態をrsm_tskにより解除する．
>  *  'd' : 対象タスクにdly_tsk(10秒)を呼び出させ，時間経過待ちにさせる．
>  *  'x' : 対象タスクにras_terにより終了要求する．
>  *  'y' : 対象タスクにdis_terを呼び出させ，タスク終了を禁止する．
>  *  'Y' : 対象タスクにena_terを呼び出させ，タスク終了を許可する．
>  *  'r' : 3つの優先度（HIGH_PRIORITY，MID_PRIORITY，LOW_PRIORITY）のレ
>  *        ディキューを回転させる．
>  *  'c' : 周期ハンドラを動作開始させる．
>  *  'C' : 周期ハンドラを動作停止させる．
>  *  'b' : アラームハンドラを5秒後に起動するよう動作開始させる．
>  *  'B' : アラームハンドラを動作停止させる．
>  *  'z' : 対象タスクにCPU例外を発生させる（タスクを終了させる）．
>  *  'Z' : 対象タスクにCPUロック状態でCPU例外を発生させる（プログラムを
>  *        終了する）．
>  *  'V' : fch_hrtで高分解能タイマを2回読む．
>  *  'v' : 発行したシステムコールを表示する（デフォルト）．
>  *  'q' : 発行したシステムコールを表示しない．
33,35d114
< #include "mini_serial.h" //2018 TT
< 
< #include "led.h" //2018 TT
48a128,131
> /*
>  *  並行実行されるタスクへのメッセージ領域
>  */
> char	message[3];
55c138,196
< 
---
> /*
>  *  並行実行されるタスク
>  */
> void task(intptr_t exinf)
> {
> 	volatile ulong_t	i;
> 	int_t		n = 0;
> 	int_t		tskno = (int_t) exinf;
> 	const char	*graph[] = { "|", "  +", "    *" };
> 	char		c;
> 
> 	while (true) {
> 		syslog(LOG_NOTICE, "task%d is running (%03d).   %s",
> 										tskno, ++n, graph[tskno-1]);
> 		for (i = 0; i < task_loop; i++);
> 		c = message[tskno-1];
> 		message[tskno-1] = 0;
> 		switch (c) {
> 		case 'e':
> 			syslog(LOG_INFO, "#%d#ext_tsk()", tskno);
> 			SVC_PERROR(ext_tsk());
> 			assert(0);
> 		case 's':
> 			syslog(LOG_INFO, "#%d#slp_tsk()", tskno);
> 			SVC_PERROR(slp_tsk());
> 			break;
> 		case 'S':
> 			syslog(LOG_INFO, "#%d#tslp_tsk(10000000)", tskno);
> 			SVC_PERROR(tslp_tsk(10000000));
> 			break;
> 		case 'd':
> 			syslog(LOG_INFO, "#%d#dly_tsk(10000000)", tskno);
> 			SVC_PERROR(dly_tsk(10000000));
> 			break;
> 		case 'y':
> 			syslog(LOG_INFO, "#%d#dis_ter()", tskno);
> 			SVC_PERROR(dis_ter());
> 			break;
> 		case 'Y':
> 			syslog(LOG_INFO, "#%d#ena_ter()", tskno);
> 			SVC_PERROR(ena_ter());
> 			break;
> #ifdef CPUEXC1
> 		case 'z':
> 			syslog(LOG_NOTICE, "#%d#raise CPU exception", tskno);
> 			RAISE_CPU_EXCEPTION;
> 			break;
> 		case 'Z':
> 			SVC_PERROR(loc_cpu());
> 			syslog(LOG_NOTICE, "#%d#raise CPU exception", tskno);
> 			RAISE_CPU_EXCEPTION;
> 			SVC_PERROR(unl_cpu());
> 			break;
> #endif /* CPUEXC1 */
> 		default:
> 			break;
> 		}
> 	}
> }
119,146d259
< 
< void blk_task(intptr_t exinf) // blinkLedTask
< 
< 
< {
< 	writeVectorBaseRegister(0x0000);
< 	setLowVector();
< //	serialInit(); //2018 TT
< 	ledInit(); //2018 TT	
< 
< 	m_serialPutStr("Start blinkLedTask ");
< 	m_serialPutChar('0'+exinf);
< 	m_serialPutStr("\r\n");
< 	syslog(LOG_NOTICE, "RP1 21_0blk v11 Blink Sample program starts (exinf = %d).", (int_t) exinf);	
< 
< 
< 
<     while (1)
<     {
<     /* Delay for 500 milliseconds. */
< syslog(LOG_NOTICE, "RP1 21_0blk v20 Blink Sample program Con (exinf = %d).", (int_t) exinf);
< 		dly_tsk(500000);
<         ledToggle( );
< //	ledToggle47();// Only for Pi1 Pi2 
<  //	ledToggleRed( );
<     }
< }
< 
149d261
< m_serialPutChar('X');
153,154d264
< //blinkLedTask();
< //	SVC_PERROR(act_tsk(TASK1));
181,182c291
< //void main_task(intptr_t exinf)
< void mainDumy_task(intptr_t exinf)
---
> void main_task(intptr_t exinf)
185,186c294,295
< //	ID		tskid = TASK1; //2018 TT
< //	int_t	tskno = 1; //2018 TT
---
> 	ID		tskid = TASK1;
> 	int_t	tskno = 1;
193,196c302
< //	HRTCNT	hrtcnt1, hrtcnt2; //2018 TT
< /////   Vecter address Set 2018 TT
< 	writeVectorBaseRegister(0x0000);
< 	setLowVector();
---
> 	HRTCNT	hrtcnt1, hrtcnt2;
198,199c304,305
< //	SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_INFO), LOG_UPTO(LOG_EMERG)));
< 	syslog(LOG_NOTICE, "RP1_21_00 v11 Blink Sample program starts (exinf = %d).", (int_t) exinf);
---
> 	SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_INFO), LOG_UPTO(LOG_EMERG)));
> 	syslog(LOG_NOTICE, "Sample program starts (exinf = %d).", (int_t) exinf);
261,263d366
< //	serialInit(); //2018 TT
< 	ledInit(); //2018 TT	
< 
267c370
< 	 
---
> 	 */
271,272c374
< ****/
< //	SVC_PERROR(act_tsk(TASK1));
---
> 
276,277d377
< 	syslog(LOG_INFO, "#sta_cyc(1)");
< 			SVC_PERROR(sta_cyc(CYCHDR1));
279d378
< m_serialPutChar('?');
281,283c380,520
< m_serialPutChar(c);
< //	SVC_PERROR(act_tsk(TASK1));
< 
---
> 		switch (c) {
> 		case 'e':
> 		case 's':
> 		case 'S':
> 		case 'd':
> 		case 'y':
> 		case 'Y':
> 		case 'z':
> 		case 'Z':
> 			message[tskno-1] = c;
> 			break;
> 		case '1':
> 			tskno = 1;
> 			tskid = TASK1;
> 			break;
> 		case '2':
> 			tskno = 2;
> 			tskid = TASK2;
> 			break;
> 		case '3':
> 			tskno = 3;
> 			tskid = TASK3;
> 			break;
> 		case 'a':
> 			syslog(LOG_INFO, "#act_tsk(%d)", tskno);
> 			SVC_PERROR(act_tsk(tskid));
> 			break;
> 		case 'A':
> 			syslog(LOG_INFO, "#can_act(%d)", tskno);
> 			SVC_PERROR(ercd = can_act(tskid));
> 			if (ercd >= 0) {
> 				syslog(LOG_NOTICE, "can_act(%d) returns %d", tskno, ercd);
> 			}
> 			break;
> 		case 't':
> 			syslog(LOG_INFO, "#ter_tsk(%d)", tskno);
> 			SVC_PERROR(ter_tsk(tskid));
> 			break;
> 		case '>':
> 			syslog(LOG_INFO, "#chg_pri(%d, HIGH_PRIORITY)", tskno);
> 			SVC_PERROR(chg_pri(tskid, HIGH_PRIORITY));
> 			break;
> 		case '=':
> 			syslog(LOG_INFO, "#chg_pri(%d, MID_PRIORITY)", tskno);
> 			SVC_PERROR(chg_pri(tskid, MID_PRIORITY));
> 			break;
> 		case '<':
> 			syslog(LOG_INFO, "#chg_pri(%d, LOW_PRIORITY)", tskno);
> 			SVC_PERROR(chg_pri(tskid, LOW_PRIORITY));
> 			break;
> 		case 'G':
> 			syslog(LOG_INFO, "#get_pri(%d, &tskpri)", tskno);
> 			SVC_PERROR(ercd = get_pri(tskid, &tskpri));
> 			if (ercd >= 0) {
> 				syslog(LOG_NOTICE, "priority of task %d is %d", tskno, tskpri);
> 			}
> 			break;
> 		case 'w':
> 			syslog(LOG_INFO, "#wup_tsk(%d)", tskno);
> 			SVC_PERROR(wup_tsk(tskid));
> 			break;
> 		case 'W':
> 			syslog(LOG_INFO, "#can_wup(%d)", tskno);
> 			SVC_PERROR(ercd = can_wup(tskid));
> 			if (ercd >= 0) {
> 				syslog(LOG_NOTICE, "can_wup(%d) returns %d", tskno, ercd);
> 			}
> 			break;
> 		case 'l':
> 			syslog(LOG_INFO, "#rel_wai(%d)", tskno);
> 			SVC_PERROR(rel_wai(tskid));
> 			break;
> 		case 'u':
> 			syslog(LOG_INFO, "#sus_tsk(%d)", tskno);
> 			SVC_PERROR(sus_tsk(tskid));
> 			break;
> 		case 'm':
> 			syslog(LOG_INFO, "#rsm_tsk(%d)", tskno);
> 			SVC_PERROR(rsm_tsk(tskid));
> 			break;
> 		case 'x':
> 			syslog(LOG_INFO, "#ras_ter(%d)", tskno);
> 			SVC_PERROR(ras_ter(tskid));
> 			break;
> 		case 'r':
> 			syslog(LOG_INFO, "#rot_rdq(three priorities)");
> 			SVC_PERROR(rot_rdq(HIGH_PRIORITY));
> 			SVC_PERROR(rot_rdq(MID_PRIORITY));
> 			SVC_PERROR(rot_rdq(LOW_PRIORITY));
> 			break;
> 		case 'c':
> 			syslog(LOG_INFO, "#sta_cyc(1)");
> 			SVC_PERROR(sta_cyc(CYCHDR1));
> 			break;
> 		case 'C':
> 			syslog(LOG_INFO, "#stp_cyc(1)");
> 			SVC_PERROR(stp_cyc(CYCHDR1));
> 			break;
> 		case 'b':
> 			syslog(LOG_INFO, "#sta_alm(1, 5000000)");
> 			SVC_PERROR(sta_alm(ALMHDR1, 5000000));
> 			break;
> 		case 'B':
> 			syslog(LOG_INFO, "#stp_alm(1)");
> 			SVC_PERROR(stp_alm(ALMHDR1));
> 			break;
> 
> 		case 'V':
> 			hrtcnt1 = fch_hrt();
> 			hrtcnt2 = fch_hrt();
> 			syslog(LOG_NOTICE, "hrtcnt1 = %tu, hrtcnt2 = %tu",
> 										hrtcnt1, hrtcnt2);
> 			break;
> 
> 		case 'v':
> 			SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_INFO),
> 										LOG_UPTO(LOG_EMERG)));
> 			break;
> 		case 'q':
> 			SVC_PERROR(syslog_msk_log(LOG_UPTO(LOG_NOTICE),
> 										LOG_UPTO(LOG_EMERG)));
> 			break;
> 
> #ifdef BIT_KERNEL
> 		case ' ':
> 			SVC_PERROR(loc_cpu());
> 			{
> 				extern ER	bit_kernel(void);
> 
> 				SVC_PERROR(ercd = bit_kernel());
> 				if (ercd >= 0) {
> 					syslog(LOG_NOTICE, "bit_kernel passed.");
> 				}
> 			}
> 			SVC_PERROR(unl_cpu());
> 			break;
> #endif /* BIT_KERNEL */
> 
> 		default:
> 			break;
> 		}
